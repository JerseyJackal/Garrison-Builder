
package com.ganggarrison.garrisonbuilder.entityloading;

import com.ganggarrison.garrisonbuilder.entitytypemanager.EntityTypeManager;
import com.ganggarrison.garrisonbuilder.gamemap.Entity;
import com.ganggarrison.garrisonbuilder.gamemap.GameMap;
import com.ganggarrison.garrisonbuilder.util.OutputHelper;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionRegistration;
import org.openide.filesystems.FileChooserBuilder;

/**
 * Action to load the entities from a .ent file into the current map.
 * @author cspotcode
 */
@ActionID(category="Maps", id="com.ganggarrison.garrisonbuilder.entityloading.ImportDotEntFileAction")
@ActionRegistration(
        displayName="Import .ent file",
        iconBase="com/ganggarrison/garrisonbuilder/entityloading/importEnts.png"
        )
@ActionReference(path="Toolbars/File", position=300)
public class ImportDotEntFileAction implements ActionListener {

    private final GameMap gm;
    
    public ImportDotEntFileAction(GameMap gm) {
        this.gm = gm;
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        // ask the user for a .ent file to load
        File inputFile = new FileChooserBuilder(ImportDotEntFileAction.class)
                .setFilesOnly(true)
                .setTitle("Import entities from file")
                .addFileFilter(new FileNameExtensionFilter(".ent file", "ent"))
                .showOpenDialog();
        if(inputFile == null)
            return;
        
        // read the contents of the ent file into a string
        StringBuilder sb = new StringBuilder();
        InputStream is = null;
        try {
            is = new FileInputStream(inputFile);
            BufferedReader reader = new BufferedReader(new InputStreamReader(is));
            char[] buffer = new char[1024]; // TODO learn a good size for this buffer
            int amountRead;
            while((amountRead = reader.read(buffer)) != -1) {
                sb.append(buffer, 0, amountRead);
            }
        } catch (FileNotFoundException ex) {
            OutputHelper.getDefault().println("Can't open nonexistent entity file: \"" + inputFile.getPath() + "\"");
            return;
        } catch (IOException ex) {
            OutputHelper.getDefault().println("IO error trying to read entity file: " + ex.getMessage());
            return;
        } finally {
            if(is != null) {
                try {
                    is.close();
                } catch (IOException ex) {
                    // TODO is it safe to leave this autogenerated code here?  or is it best practice to have an empty catch block that swallows the exception
                    Logger.getLogger(ImportDotEntFileAction.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        String entityData = sb.toString();
        
        // convert entityData into a set of entities
        DotEntFileLoader loader = new DotEntFileLoader(new EntityFactory(EntityTypeManager.getInstance()));
        Set<Entity> entities;
        try {
            entities = loader.createEntities(entityData);
        } catch (DotEntFormatException ex) {
            OutputHelper.getDefault().println("Formatting error in ent file: " + ex.getMessage());
            return;
        }
        
        // add created entities to the map
        for(Entity ent : entities) {
            gm.addEntity(ent);
        }
        
        OutputHelper.getDefault().println("Successfully imported " + entities.size() + " entities from " + inputFile.getPath());
    }
}
